import numpy as np
from Energy_Spectrum import compute_Ek_spectrum
import matplotlib.pyplot as plt

#-----------------------------------------------------
def get_fluctuating_velocity_field(velocity_field):
    print(" - Getting fluctuating velocity field...")
    components_string=["x","y","z"]
    for i in range(0,3):
        mean_velocity = np.average(velocity_field[i])
        velocity_field[i] -= mean_velocity
        print(" - * Mean velocity in %s-direction: %1.8e" % (components_string[i],mean_velocity))
    print(" - done.")
    return velocity_field
#-----------------------------------------------------
# load Navah's velocity field
u,v,w = np.loadtxt("velocityfld_ascii.dat",skiprows=2,usecols=(3,4,5),unpack=True)
velocity_fld = []
velocity_fld.append(u)
velocity_fld.append(v)
velocity_fld.append(w)
k,E = compute_Ek_spectrum(velocity_fld,reference_velocity=(0.1*np.sqrt(1.4)))

# load PHiLiP velocity field
#-----------------------------------------------------
from sys import platform
if platform == "linux" or platform == "linux2":
    # linux
    filesystem="/media/julien/Samsung_T5/"
elif platform == "darwin":
    # OS X
    filesystem="/Volumes/Samsung_T5/"
# load the 96^3 P5
path = "NarvalFiles/2023_JCP/flux_nodes/viscous_TGV_ILES_NSFR_cDG_IR_2PF_GL_OI-0_dofs096_p5_procs512/"
file = filesystem+path+"flow_field_files/velocity_vorticity-0_reordered.dat"
data = np.loadtxt(file,skiprows=1,usecols=(3,4,5),dtype=np.float64)
velocity_field = [data[:,0],data[:,1],data[:,2]] # u,v,w
k_PHiLiP,E_PHiLiP = compute_Ek_spectrum(get_fluctuating_velocity_field(velocity_field))
# load the spectra generated by TurboGenPY
file = filesystem+path+"flow_field_files/velocity_vorticity-0_reordered_spectra_no_smoothing.dat"
k_PHiLiP_TurboGenPY,E_PHiLiP_TurboGenPY = np.loadtxt(file,unpack=True,dtype=np.float64)

# # load the 256^3 P7
# path = "NarvalFiles/2023_JCP/filtered_dns_viscous_tgv/viscous_TGV_ILES_NSFR_cDG_IR_2PF_GL_OI-0_dofs0256_p7_procs1024/"
# file = filesystem+path+"flow_field_files/velocity_vorticity-0_reordered.dat"
# data = np.loadtxt(file,skiprows=1,usecols=(3,4,5),dtype=np.float64)
# velocity_field = [data[:,0],data[:,1],data[:,2]] # u,v,w
# # k_PHiLiP_DNS,E_PHiLiP_DNS = compute_Ek_spectrum(get_fluctuating_velocity_field(velocity_field))
# # load the spectra generated by TurboGenPY
# file = filesystem+path+"flow_field_files/velocity_vorticity-0_reordered_spectra_no_smoothing.dat"
# k_PHiLiP_DNS_TurboGenPY,E_PHiLiP_DNS_TurboGenPY = np.loadtxt(file,unpack=True,dtype=np.float64)

# # load the 256^3 P7 from paraview
# path = "NarvalFiles/2023_JCP/filtered_dns_viscous_tgv/viscous_TGV_ILES_NSFR_cDG_IR_2PF_GL_OI-0_dofs0256_p7_procs1024/"
# file = "/home/julien/"+path+"solution_files/velocity_field_extracted_from_paraview_reordered.txt"
# data = np.loadtxt(file,skiprows=1,usecols=(0,1,2),dtype=np.float64)
# velocity_field = [data[:,0],data[:,1],data[:,2]] # u,v,w
# k_PHiLiP_DNS_from_paraview,E_PHiLiP_DNS_from_paraview = compute_Ek_spectrum(get_fluctuating_velocity_field(velocity_field))

fig = plt.figure()
plt.title("Kinetic Energy Spectrum")
plt.xlabel(r"k (wavenumber)")
plt.ylabel(r"TKE of the k$^{th}$ wavenumber")
plt.ylim([1.0e-9,1.0e-1])
plt.xlim([2.0e0,2.0e2])
plt.loglog(k,E,label="$84^3$ DOFs, P6, $t=14$")
plt.loglog(k_PHiLiP,E_PHiLiP,label="$96^3$ DOFs, P5, $t=8$")
plt.loglog(k_PHiLiP_TurboGenPY,E_PHiLiP_TurboGenPY,linestyle="dashed",label="$96^3$ DOFs, P5, $t=8$, TurboGenPY")
# plt.loglog(k_PHiLiP_DNS,E_PHiLiP_DNS,label="$256^3$ DOFs, P7, $t=8$")
# plt.loglog(k_PHiLiP_DNS_TurboGenPY,E_PHiLiP_DNS_TurboGenPY,linestyle="dashed",label="$256^3$ DOFs, P7, $t=8$, TurboGenPY")
# plt.loglog(k_PHiLiP_DNS_from_paraview,E_PHiLiP_DNS_from_paraview,label="$256^3$ DOFs, P7, $t=8$, Paraview Slice")
plt.legend()
plt.axvline(x=43,linestyle="dotted",color="blue")
plt.axvline(x=74,linestyle="dashed",color="blue")
plt.axvline(x=49,linestyle="dotted",color="orange")
plt.axvline(x=85,linestyle="dashed",color="orange")
plt.axvline(x=129,linestyle="dotted",color="red")
plt.axvline(x=223,linestyle="dashed",color="red")
plt.show()